#!groovy

node(LABEL) {
	if (fileExists('testoutput')) {
		println "Results files may be present from a previous run. Cleaning up."
		dir('testoutput') {
			deleteDir()
		}
		println "testoutput directory has been erased."
		new File('testoutput').mkdir()
	}

	if (params.TEST_RESULTS_DIRECTORY.isEmpty()) {
		println "No TEST_RESULTS_DIRECTORY has been specified. Copying results files from UPSTREAM_JOB_NAME: ${params.UPSTREAM_JOB_NAME}"
		copyArtifacts fingerprintArtifacts: true, projectName: "${params.UPSTREAM_JOB_NAME}", flatten: true, selector: specific("${params.UPSTREAM_JOB_NUMBER}"), target: 'testoutput'
	} else {
		println "A TEST_RESULTS_DIRECTORY has been specified."
		println "Instead of copying results files from an upstream job, we will now produce a results file from: ${params.TEST_RESULTS_DIRECTORY}"
		tar file: "${WORKSPACE}/testoutput/AQA_${params.UPSTREAM_JOB_NAME}_${params.TIMESTAMP}.tar.gz", compress: true, dir: "${params.TEST_RESULTS_DIRECTORY}"
	}

	String website_backend_clone = "${WORKSPACE}/openjdk-website-backend"

	// If website_backend_clone doesn't exist
	if ( !fileExists(website_backend_clone) || "${params.REFRESH_BACKEND_REPO}".equalsIgnoreCase("TRUE")) {
		if (fileExists(website_backend_clone)) {
			println "Node already has an openjdk-website-backend clone."
			println "This clone will now be refreshed."
			sh "rm -rf " + website_backend_clone;
		} else {
			println "Node does not have an openjdk-website-backend clone."
			println "This repo will now be cloned."
		}
		// Clone openjdk_website_backend repo
		sh "git clone -b jck_upgrade https://github.com/adamfarley/openjdk-website-backend.git " + website_backend_clone
	} else {
		println "Node already has an openjdk-website-backend clone."
		println "A refresh was not requested, so the existing clone will be used."
	}
	
	withCredentials([string(credentialsId: "${params.GITHUB_TOKEN}", variable: 'token')]) {
		sh website_backend_clone + "/sbin/Release.sh";
	}
}