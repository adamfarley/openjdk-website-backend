#!groovy

node(LABEL) {
	copyArtifacts fingerprintArtifacts: true, projectName: "${params.UPSTREAM_JOB_NAME}", flatten: true, selector: specific("${params.UPSTREAM_JOB_NUMBER}"), target: 'testoutput'

	String website_backend_clone = "${WORKSPACE}/openjdk-website-backend"

	// If website_backend_clone doesn't exist
	if ( !fileExists(website_backend_clone) || "${params.REFRESH_BACKEND_REPO}".equalsIgnoreCase("TRUE")) {
		if (fileExists(website_backend_clone)) {
			println "Node already has an openjdk-website-backend clone."
			println "This clone will now be refreshed."
			sh "rm -rf " + website_backend_clone;
		} else {
			println "Node does not have an openjdk-website-backend clone."
			println "This repo will now be cloned."
		}
		// Clone openjdk_website_backend repo
		sh "git clone -b jck_upgrade https://github.com/adamfarley/openjdk-website-backend.git " + website_backend_clone
	} else {
		println "Node already has an openjdk-website-backend clone."
		println "A refresh was not requested, so the existing clone will be used."
	}
	
	withCredentials([string(credentialsId: "${params.GITHUB_TOKEN}", variable: 'token')]) {
		sh website_backend_clone + "/sbin/Release.sh";
	}
}